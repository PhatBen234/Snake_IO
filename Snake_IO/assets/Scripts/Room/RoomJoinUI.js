import SocketManager from './SocketManager';
import RoomDataManager from './RoomDataManager';
import UIController from './UIController';

const { ccclass } = cc._decorator;

@ccclass
export default class RoomJoinUI extends cc.Component {
  socketManager = null;
  roomDataManager = null;
  uiController = null;

  onLoad() {
    this.initializeComponents();
    this.setupEventHandlers();
    this.connectToServer();
  }

  initializeComponents() {
    this.socketManager = new SocketManager();
    this.uiController = this.getComponent(UIController);
    
    // Kh·ªüi t·∫°o RoomDataManager sau khi c√≥ playerId
    this.socketManager.on('connect', (data) => {
      this.roomDataManager = new RoomDataManager(data.playerId);
    });
  }

  setupEventHandlers() {
    // Socket event handlers
    this.socketManager.on('connect', (data) => {
      this.uiController.updateStatus("ƒê√£ k·∫øt n·ªëi server");
      this.uiController.setButtonInteractable('join', true);
      this.uiController.setButtonInteractable('create', true);
    });

    this.socketManager.on('room-created', (data) => {
      this.roomDataManager.setRoomData(data.roomId, data.roomData, data.isHost);
      this.uiController.showLobbyPanel();
      this.updateUIRoomInfo();
      this.uiController.updateStatus("ƒê√£ t·∫°o ph√≤ng th√†nh c√¥ng");
    });

    this.socketManager.on('joined-room', (data) => {
      this.roomDataManager.setRoomData(data.roomId, data.roomData, data.isHost);
      this.uiController.showLobbyPanel();
      this.updateUIRoomInfo();
      this.uiController.updateStatus("ƒê√£ v√†o ph√≤ng th√†nh c√¥ng");
    });

    this.socketManager.on('player-joined', (data) => {
      if (this.roomDataManager.getRoomData()) {
        this.roomDataManager.updateRoomData(data.roomData);
        this.updateUIRoomInfo();
      }
    });

    this.socketManager.on('player-left', (data) => {
      if (this.roomDataManager.getRoomData()) {
        this.roomDataManager.updateRoomData(data.roomData);
        this.updateUIRoomInfo();
      }
    });

    this.socketManager.on('new-host', (data) => {
      if (data.newHostId === this.socketManager.getPlayerId()) {
        this.roomDataManager.setAsHost(true);
        this.uiController.updateStatus("B·∫°n ƒë√£ tr·ªü th√†nh ch·ªß ph√≤ng m·ªõi!");
      }
      if (this.roomDataManager.getRoomData()) {
        this.roomDataManager.updateRoomData(data.roomData);
        this.updateUIRoomInfo();
      }
    });

    this.socketManager.on('game-started', () => {
      console.log("üöÄ Game started! Loading game scene...");
      this.uiController.updateStatus("Game ƒë√£ b·∫Øt ƒë·∫ßu! ƒêang t·∫£i...");
      
      // L∆∞u th√¥ng tin c·∫ßn thi·∫øt v√†o global
      this.saveGameData();
      
      // Load game scene
      this.loadGameScene();
    });

    this.socketManager.on('room-full', () => {
      this.uiController.updateStatus("Ph√≤ng ƒë√£ ƒë·∫ßy!");
    });

    this.socketManager.on('join-failed', (data) => {
      this.uiController.updateStatus(`Kh√¥ng th·ªÉ v√†o ph√≤ng: ${data.reason}`);
    });

    this.socketManager.on('create-failed', (data) => {
      this.uiController.updateStatus(`Kh√¥ng th·ªÉ t·∫°o ph√≤ng: ${data.reason}`);
    });

    this.socketManager.on('disconnect', () => {
      this.uiController.updateStatus("M·∫•t k·∫øt n·ªëi server");
      this.uiController.setButtonInteractable('join', false);
      this.uiController.setButtonInteractable('create', false);
      this.uiController.showJoinPanel();
    });

    // UI event handlers
    this.uiController.on('createRoom', (data) => {
      this.onCreateRoom(data.playerName);
    });

    this.uiController.on('joinRoom', (data) => {
      this.onJoinRoom(data.roomId, data.playerName);
    });

    this.uiController.on('startGame', () => {
      this.onStartGame();
    });

    this.uiController.on('leaveRoom', () => {
      this.onLeaveRoom();
    });
  }

  connectToServer() {
    this.socketManager.connectToServer();
  }

  onCreateRoom(playerName) {
    if (!this.socketManager.isConnected()) {
      this.uiController.updateStatus("Ch∆∞a k·∫øt n·ªëi t·ªõi server!");
      return;
    }

    this.uiController.updateStatus("ƒêang t·∫°o ph√≤ng...");
    this.uiController.setButtonInteractable('create', false);

    console.log("üè† Creating new room...");

    this.socketManager.emit("create-room", {
      playerId: this.socketManager.getPlayerId(),
      playerName: playerName,
    });

    setTimeout(() => {
      this.uiController.setButtonInteractable('create', true);
    }, 2000);
  }

  onJoinRoom(roomId, playerName) {
    if (!this.socketManager.isConnected()) {
      this.uiController.updateStatus("Ch∆∞a k·∫øt n·ªëi t·ªõi server!");
      return;
    }

    this.uiController.updateStatus("ƒêang v√†o ph√≤ng...");
    this.uiController.setButtonInteractable('join', false);

    console.log("üì• Attempting to join room:", roomId);

    this.socketManager.emit("join-room", {
      roomId: roomId,
      playerId: this.socketManager.getPlayerId(),
      playerName: playerName,
    });

    setTimeout(() => {
      this.uiController.setButtonInteractable('join', true);
    }, 2000);
  }

  onStartGame() {
    if (!this.socketManager.isConnected() || !this.roomDataManager.getCurrentRoom() || !this.roomDataManager.getIsHost()) {
      return;
    }

    if (this.roomDataManager.getPlayerCount() < 2) {
      this.uiController.updateStatus("C·∫ßn √≠t nh·∫•t 2 ng∆∞·ªùi ch∆°i ƒë·ªÉ b·∫Øt ƒë·∫ßu!");
      return;
    }

    this.uiController.updateStatus("ƒêang b·∫Øt ƒë·∫ßu game...");
    this.socketManager.emit("start-game", {
      roomId: this.roomDataManager.getCurrentRoom(),
      playerId: this.socketManager.getPlayerId(),
    });
  }

  onLeaveRoom() {
    if (!this.socketManager.isConnected() || !this.roomDataManager.getCurrentRoom()) {
      return;
    }

    this.socketManager.emit("leave-room", {
      roomId: this.roomDataManager.getCurrentRoom(),
      playerId: this.socketManager.getPlayerId(),
    });

    this.roomDataManager.clearRoom();
    this.uiController.showJoinPanel();
    this.uiController.updateStatus("ƒê√£ r·ªùi kh·ªèi ph√≤ng");
  }

  updateUIRoomInfo() {
    this.uiController.updateRoomInfo(
      this.roomDataManager.getCurrentRoom(),
      this.roomDataManager.getRoomData(),
      this.roomDataManager.getIsHost(),
      this.socketManager.getPlayerId()
    );
  }

  onCopyRoomIdClick() {
    this.uiController.onCopyRoomIdClick(this.roomDataManager.getCurrentRoom());
  }

  saveGameData() {
    // L∆∞u th√¥ng tin c·∫ßn thi·∫øt v√†o global ƒë·ªÉ GameController s·ª≠ d·ª•ng
    window.gameSocket = this.socketManager.socket;
    window.currentRoomId = this.roomDataManager.getCurrentRoom();
    window.currentPlayerId = this.socketManager.getPlayerId();
    window.roomData = this.roomDataManager.getRoomData();
    
    console.log("üíæ Saved game data:", {
      roomId: window.currentRoomId,
      playerId: window.currentPlayerId,
      hasSocket: !!window.gameSocket
    });
  }

  loadGameScene() {
    // Hide UI tr∆∞·ªõc khi load scene
    this.uiController.hideUI();
    
    // Load game scene sau m·ªôt ch√∫t delay ƒë·ªÉ ƒë·∫£m b·∫£o data ƒë√£ ƒë∆∞·ª£c save
    setTimeout(() => {
      console.log("üéÆ Loading GameScene...");
      cc.director.loadScene("GameScene", (err, scene) => {
        if (err) {
          console.error("‚ùå Failed to load GameScene:", err);
          this.uiController.updateStatus("L·ªói khi t·∫£i game!");
          this.uiController.showUI();
        } else {
          console.log("‚úÖ GameScene loaded successfully");
        }
      });
    }, 500);
  }

  onDestroy() {
    if (this.socketManager) {
      // Kh√¥ng disconnect socket khi chuy·ªÉn scene v√¨ GameController c·∫ßn d√πng
      console.log("üîÑ Preserving socket connection for GameScene");
    }
  }
}